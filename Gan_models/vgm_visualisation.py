# -*- coding: utf-8 -*-
"""VGM_visualisation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tX5neIZiZfRrLEu0fpCcYx5hKLJIsury

## Визуализация выделения мод из распределения в непрерывных столбцах.
Создается нормальное, бимодальное, мулитимодально распределения и показывается какие моды VGM нашла в них
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.mixture import BayesianGaussianMixture

def generate_bimodal_data(n_samples, mean1, std1, mean2, std2, mixing_ratio):
    """Генерирует данные из смеси двух нормальных распределений."""
    n_samples1 = int(n_samples * mixing_ratio)
    n_samples2 = n_samples - n_samples1
    data1 = np.random.normal(mean1, std1, n_samples1)
    data2 = np.random.normal(mean2, std2, n_samples2)
    return np.concatenate([data1, data2])

def generate_trimodal_data(n_samples, mean1, std1, mean2, std2, mean3, std3, mixing_ratio1, mixing_ratio2):
    """Генерирует данные из смеси трех нормальных распределений."""
    n_samples1 = int(n_samples * mixing_ratio1)
    n_samples2 = int(n_samples * mixing_ratio2)
    n_samples3 = n_samples - n_samples1 - n_samples2
    data1 = np.random.normal(mean1, std1, n_samples1)
    data2 = np.random.normal(mean2, std2, n_samples2)
    data3 = np.random.normal(mean3, std3, n_samples3)
    return np.concatenate([data1, data2, data3])

data = pd.DataFrame({
    'Feature1': generate_bimodal_data(n_samples=500, mean1=0, std1=1, mean2=5, std2=1, mixing_ratio=0.6),
    'Feature2': generate_trimodal_data(n_samples=500, mean1=-3, std1=1, mean2=2, std2=2, mean3=7, std3=1, mixing_ratio1=0.3, mixing_ratio2=0.4),
    'Feature3': np.random.normal(-3, 1.5, 500),
})

gmm_models = {}

# Итерация по колонкам и обучение моделей
for column in data.columns:
    column_data = data[column].values.reshape(-1, 1)
    vgm = BayesianGaussianMixture(
        n_components=10,  # Максимальное число компонентов
        covariance_type='full',
        weight_concentration_prior=0.1,
        random_state=42
    )
    vgm.fit(column_data)

    # Число активных мод
    num_modes = np.sum(vgm.weights_ > 0.1)
    gmm_models[column] = {
        'model': vgm,
        'num_modes': num_modes,
        'weights': vgm.weights_,
        'means': vgm.means_,
        'covariances': vgm.covariances_,
    }

# Визуализация результатов
fig, axes = plt.subplots(1, 3, figsize=(18, 5))
x = np.linspace(-10, 10, 1000)

for i, column in enumerate(data.columns):
    ax = axes[i]
    column_data = data[column].values
    vgm = gmm_models[column]['model']

    # Гистограмма данных
    ax.hist(column_data, bins=30, density=True, alpha=0.6, color='gray', label='Data Histogram')

    # Смесь Гауссовских распределений
    for weight, mean, cov in zip(vgm.weights_, vgm.means_, vgm.covariances_):
        if weight > 0.1:
            pdf = weight * (1 / np.sqrt(2 * np.pi * cov[0][0])) * np.exp(-0.5 * ((x - mean[0]) ** 2) / cov[0][0])
            ax.plot(x, pdf, label=f"Mode (μ={mean[0]:.2f}, σ²={cov[0][0]:.2f})")

    ax.set_title(f"Column: {column} (Modes: {gmm_models[column]['num_modes']})")
    ax.legend(fontsize=8)
    ax.set_xlabel("Value")
    ax.set_ylabel("Density")

plt.tight_layout()
plt.show()